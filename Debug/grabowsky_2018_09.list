
grabowsky_2018_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002eb8  08002eb8  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000050  20000000  08002ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  20000050  08002f10  00020050  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000cc  08002f10  000200cc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009020  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000180c  00000000  00000000  00029099  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009c0  00000000  00000000  0002a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f0  00000000  00000000  0002b268  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003a54  00000000  00000000  0002bb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002f62  00000000  00000000  0002f5ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003250e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002a10  00000000  00000000  0003258c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00034f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ea0 	.word	0x08002ea0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002ea0 	.word	0x08002ea0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <NVIC_PriorityGroupConfig+0x20>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	60d3      	str	r3, [r2, #12]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000758:	b480      	push	{r7}
 800075a:	b087      	sub	sp, #28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	78db      	ldrb	r3, [r3, #3]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d03a      	beq.n	80007ea <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000774:	4b27      	ldr	r3, [pc, #156]	; (8000814 <NVIC_Init+0xbc>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	43db      	mvns	r3, r3
 800077a:	0a1b      	lsrs	r3, r3, #8
 800077c:	f003 0307 	and.w	r3, r3, #7
 8000780:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	f1c3 0304 	rsb	r3, r3, #4
 8000788:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa22 f303 	lsr.w	r3, r2, r3
 8000792:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	785b      	ldrb	r3, [r3, #1]
 8000798:	461a      	mov	r2, r3
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	789b      	ldrb	r3, [r3, #2]
 80007a6:	461a      	mov	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4013      	ands	r3, r2
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80007b8:	4a17      	ldr	r2, [pc, #92]	; (8000818 <NVIC_Init+0xc0>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	6979      	ldr	r1, [r7, #20]
 80007c0:	b2c9      	uxtb	r1, r1
 80007c2:	4413      	add	r3, r2
 80007c4:	460a      	mov	r2, r1
 80007c6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <NVIC_Init+0xc0>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	095b      	lsrs	r3, r3, #5
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	f003 031f 	and.w	r3, r3, #31
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80007e8:	e00f      	b.n	800080a <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007ea:	490b      	ldr	r1, [pc, #44]	; (8000818 <NVIC_Init+0xc0>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	095b      	lsrs	r3, r3, #5
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	f003 031f 	and.w	r3, r3, #31
 80007fe:	2201      	movs	r2, #1
 8000800:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000802:	f100 0320 	add.w	r3, r0, #32
 8000806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800080a:	bf00      	nop
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	e000e100 	.word	0xe000e100

0800081c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800083a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800083e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	4313      	orrs	r3, r2
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <ADC_Init+0xa0>)
 8000862:	4013      	ands	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	68da      	ldr	r2, [r3, #12]
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	795b      	ldrb	r3, [r3, #5]
 8000874:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000876:	4313      	orrs	r3, r2
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	4313      	orrs	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000888:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000890:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	7c1b      	ldrb	r3, [r3, #16]
 8000896:	3b01      	subs	r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	4313      	orrs	r3, r2
 800089e:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	051b      	lsls	r3, r3, #20
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	fff1f7fd 	.word	0xfff1f7fd

080008c0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d006      	beq.n	80008e0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f043 0201 	orr.w	r2, r3, #1
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 80008de:	e005      	b.n	80008ec <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f023 0201 	bic.w	r2, r3, #1
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	609a      	str	r2, [r3, #8]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f043 0208 	orr.w	r2, r3, #8
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	609a      	str	r2, [r3, #8]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e001      	b.n	8000936 <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f043 0204 	orr.w	r2, r3, #4
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	609a      	str	r2, [r3, #8]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e001      	b.n	8000982 <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8000982:	7bfb      	ldrb	r3, [r7, #15]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d006      	beq.n	80009ae <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 80009ac:	e005      	b.n	80009ba <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	609a      	str	r2, [r3, #8]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80009e4:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	035b      	lsls	r3, r3, #13
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	605a      	str	r2, [r3, #4]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d006      	beq.n	8000a26 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
  }
}
 8000a24:	e005      	b.n	8000a32 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= CR1_DISCEN_Reset;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	605a      	str	r2, [r3, #4]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	4608      	mov	r0, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	70fb      	strb	r3, [r7, #3]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	70bb      	strb	r3, [r7, #2]
 8000a52:	4613      	mov	r3, r2
 8000a54:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	2b09      	cmp	r3, #9
 8000a62:	d923      	bls.n	8000aac <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000a6a:	78fb      	ldrb	r3, [r7, #3]
 8000a6c:	f1a3 020a 	sub.w	r2, r3, #10
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	2207      	movs	r2, #7
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000a88:	7879      	ldrb	r1, [r7, #1]
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	f1a3 020a 	sub.w	r2, r3, #10
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	e01e      	b.n	8000aea <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000ab2:	78fa      	ldrb	r2, [r7, #3]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4413      	add	r3, r2
 8000aba:	2207      	movs	r2, #7
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000acc:	7879      	ldrb	r1, [r7, #1]
 8000ace:	78fa      	ldrb	r2, [r7, #3]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000aea:	78bb      	ldrb	r3, [r7, #2]
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d821      	bhi.n	8000b34 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000af6:	78bb      	ldrb	r3, [r7, #2]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	221f      	movs	r2, #31
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000b12:	78f9      	ldrb	r1, [r7, #3]
 8000b14:	78bb      	ldrb	r3, [r7, #2]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000b32:	e047      	b.n	8000bc4 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000b34:	78bb      	ldrb	r3, [r7, #2]
 8000b36:	2b0c      	cmp	r3, #12
 8000b38:	d821      	bhi.n	8000b7e <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8000b40:	78bb      	ldrb	r3, [r7, #2]
 8000b42:	1fda      	subs	r2, r3, #7
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	221f      	movs	r2, #31
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000b5c:	78f9      	ldrb	r1, [r7, #3]
 8000b5e:	78bb      	ldrb	r3, [r7, #2]
 8000b60:	1fda      	subs	r2, r3, #7
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000b7c:	e022      	b.n	8000bc4 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b82:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8000b84:	78bb      	ldrb	r3, [r7, #2]
 8000b86:	f1a3 020d 	sub.w	r2, r3, #13
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	221f      	movs	r2, #31
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000ba2:	78f9      	ldrb	r1, [r7, #3]
 8000ba4:	78bb      	ldrb	r3, [r7, #2]
 8000ba6:	f1a3 020d 	sub.w	r2, r3, #13
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	4013      	ands	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e001      	b.n	8000bf4 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000c10:	4013      	ands	r3, r2
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a43      	ldr	r2, [pc, #268]	; (8000d40 <DMA_DeInit+0x140>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d106      	bne.n	8000c44 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000c36:	4a43      	ldr	r2, [pc, #268]	; (8000d44 <DMA_DeInit+0x144>)
 8000c38:	4b42      	ldr	r3, [pc, #264]	; (8000d44 <DMA_DeInit+0x144>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f043 030f 	orr.w	r3, r3, #15
 8000c40:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8000c42:	e077      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <DMA_DeInit+0x148>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d106      	bne.n	8000c5a <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000c4c:	4a3d      	ldr	r2, [pc, #244]	; (8000d44 <DMA_DeInit+0x144>)
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <DMA_DeInit+0x144>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000c56:	6053      	str	r3, [r2, #4]
}
 8000c58:	e06c      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a3b      	ldr	r2, [pc, #236]	; (8000d4c <DMA_DeInit+0x14c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d106      	bne.n	8000c70 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000c62:	4a38      	ldr	r2, [pc, #224]	; (8000d44 <DMA_DeInit+0x144>)
 8000c64:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <DMA_DeInit+0x144>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000c6c:	6053      	str	r3, [r2, #4]
}
 8000c6e:	e061      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a37      	ldr	r2, [pc, #220]	; (8000d50 <DMA_DeInit+0x150>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d106      	bne.n	8000c86 <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000c78:	4a32      	ldr	r2, [pc, #200]	; (8000d44 <DMA_DeInit+0x144>)
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <DMA_DeInit+0x144>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000c82:	6053      	str	r3, [r2, #4]
}
 8000c84:	e056      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a32      	ldr	r2, [pc, #200]	; (8000d54 <DMA_DeInit+0x154>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d106      	bne.n	8000c9c <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	; (8000d44 <DMA_DeInit+0x144>)
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <DMA_DeInit+0x144>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000c98:	6053      	str	r3, [r2, #4]
}
 8000c9a:	e04b      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <DMA_DeInit+0x158>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d106      	bne.n	8000cb2 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000ca4:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <DMA_DeInit+0x144>)
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <DMA_DeInit+0x144>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cae:	6053      	str	r3, [r2, #4]
}
 8000cb0:	e040      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <DMA_DeInit+0x15c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d106      	bne.n	8000cc8 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000cba:	4a22      	ldr	r2, [pc, #136]	; (8000d44 <DMA_DeInit+0x144>)
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <DMA_DeInit+0x144>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000cc4:	6053      	str	r3, [r2, #4]
}
 8000cc6:	e035      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a25      	ldr	r2, [pc, #148]	; (8000d60 <DMA_DeInit+0x160>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d106      	bne.n	8000cde <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000cd0:	4a24      	ldr	r2, [pc, #144]	; (8000d64 <DMA_DeInit+0x164>)
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <DMA_DeInit+0x164>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f043 030f 	orr.w	r3, r3, #15
 8000cda:	6053      	str	r3, [r2, #4]
}
 8000cdc:	e02a      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <DMA_DeInit+0x168>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d106      	bne.n	8000cf4 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <DMA_DeInit+0x164>)
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <DMA_DeInit+0x164>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000cf0:	6053      	str	r3, [r2, #4]
}
 8000cf2:	e01f      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <DMA_DeInit+0x16c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d106      	bne.n	8000d0a <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <DMA_DeInit+0x164>)
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <DMA_DeInit+0x164>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000d06:	6053      	str	r3, [r2, #4]
}
 8000d08:	e014      	b.n	8000d34 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <DMA_DeInit+0x170>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d106      	bne.n	8000d20 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <DMA_DeInit+0x164>)
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <DMA_DeInit+0x164>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000d1c:	6053      	str	r3, [r2, #4]
}
 8000d1e:	e009      	b.n	8000d34 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <DMA_DeInit+0x174>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d105      	bne.n	8000d34 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <DMA_DeInit+0x164>)
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <DMA_DeInit+0x164>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000d32:	6053      	str	r3, [r2, #4]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40020008 	.word	0x40020008
 8000d44:	40020000 	.word	0x40020000
 8000d48:	4002001c 	.word	0x4002001c
 8000d4c:	40020030 	.word	0x40020030
 8000d50:	40020044 	.word	0x40020044
 8000d54:	40020058 	.word	0x40020058
 8000d58:	4002006c 	.word	0x4002006c
 8000d5c:	40020080 	.word	0x40020080
 8000d60:	40020408 	.word	0x40020408
 8000d64:	40020400 	.word	0x40020400
 8000d68:	4002041c 	.word	0x4002041c
 8000d6c:	40020430 	.word	0x40020430
 8000d70:	40020444 	.word	0x40020444
 8000d74:	40020458 	.word	0x40020458

08000d78 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d96:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000da6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000db2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000dbe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60da      	str	r2, [r3, #12]
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000e00:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e02:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	799b      	ldrb	r3, [r3, #6]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d04f      	beq.n	8000eac <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000e0c:	4931      	ldr	r1, [pc, #196]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000e1c:	492d      	ldr	r1, [pc, #180]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	461a      	mov	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4413      	add	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	6811      	ldr	r1, [r2, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6812      	ldr	r2, [r2, #0]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000e46:	4923      	ldr	r1, [pc, #140]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4013      	ands	r3, r2
 8000e54:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000e56:	491f      	ldr	r1, [pc, #124]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4013      	ands	r3, r2
 8000e64:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	795b      	ldrb	r3, [r3, #5]
 8000e6a:	2b10      	cmp	r3, #16
 8000e6c:	d10e      	bne.n	8000e8c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000e6e:	4919      	ldr	r1, [pc, #100]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000e7c:	4915      	ldr	r1, [pc, #84]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000e8a:	e01d      	b.n	8000ec8 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <EXTI_Init+0xe0>)
 8000e8e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	795b      	ldrb	r3, [r3, #5]
 8000e94:	461a      	mov	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	6811      	ldr	r1, [r2, #0]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	e00d      	b.n	8000ec8 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	791b      	ldrb	r3, [r3, #4]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	6811      	ldr	r1, [r2, #0]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	43d2      	mvns	r2, r2
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000ee0:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <EXTI_ClearITPendingBit+0x18>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6153      	str	r3, [r2, #20]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <FLASH_SetLatency+0x34>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f0c:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <FLASH_SetLatency+0x34>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40022000 	.word	0x40022000

08000f2c <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <FLASH_Unlock+0x18>)
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <FLASH_Unlock+0x1c>)
 8000f34:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8000f36:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <FLASH_Unlock+0x18>)
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <FLASH_Unlock+0x20>)
 8000f3a:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40022000 	.word	0x40022000
 8000f48:	45670123 	.word	0x45670123
 8000f4c:	cdef89ab 	.word	0xcdef89ab

08000f50 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	78db      	ldrb	r3, [r3, #3]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	78db      	ldrb	r3, [r3, #3]
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d044      	beq.n	8001028 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	e038      	b.n	800101c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000faa:	2201      	movs	r2, #1
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d126      	bne.n	8001016 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000fce:	220f      	movs	r2, #15
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	78db      	ldrb	r3, [r3, #3]
 8000ff4:	2b28      	cmp	r3, #40	; 0x28
 8000ff6:	d105      	bne.n	8001004 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	e008      	b.n	8001016 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	78db      	ldrb	r3, [r3, #3]
 8001008:	2b48      	cmp	r3, #72	; 0x48
 800100a:	d104      	bne.n	8001016 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800100c:	2201      	movs	r2, #1
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	409a      	lsls	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	3301      	adds	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2b07      	cmp	r3, #7
 8001020:	d9c3      	bls.n	8000faa <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	2bff      	cmp	r3, #255	; 0xff
 800102e:	d946      	bls.n	80010be <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	e03a      	b.n	80010b2 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	3308      	adds	r3, #8
 8001040:	2201      	movs	r2, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d127      	bne.n	80010ac <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001062:	220f      	movs	r2, #15
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	43db      	mvns	r3, r3
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	4013      	ands	r3, r2
 8001074:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4313      	orrs	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	78db      	ldrb	r3, [r3, #3]
 8001088:	2b28      	cmp	r3, #40	; 0x28
 800108a:	d105      	bne.n	8001098 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	3308      	adds	r3, #8
 8001090:	2201      	movs	r2, #1
 8001092:	409a      	lsls	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	78db      	ldrb	r3, [r3, #3]
 800109c:	2b48      	cmp	r3, #72	; 0x48
 800109e:	d105      	bne.n	80010ac <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	3308      	adds	r3, #8
 80010a4:	2201      	movs	r2, #1
 80010a6:	409a      	lsls	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	3301      	adds	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2b07      	cmp	r3, #7
 80010b6:	d9c1      	bls.n	800103c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	605a      	str	r2, [r3, #4]
  }
}
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d6:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2202      	movs	r2, #2
 80010dc:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2204      	movs	r2, #4
 80010e2:	70da      	strb	r2, [r3, #3]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e001      	b.n	8001114 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800112c:	887a      	ldrh	r2, [r7, #2]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	611a      	str	r2, [r3, #16]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	615a      	str	r2, [r3, #20]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8001174:	e002      	b.n	800117c <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	615a      	str	r2, [r3, #20]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
	...

08001188 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da03      	bge.n	80011b2 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <GPIO_PinRemapConfig+0xdc>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e002      	b.n	80011b8 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <GPIO_PinRemapConfig+0xdc>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	0c1b      	lsrs	r3, r3, #16
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80011ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80011d2:	d10a      	bne.n	80011ea <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80011da:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80011dc:	4a21      	ldr	r2, [pc, #132]	; (8001264 <GPIO_PinRemapConfig+0xdc>)
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <GPIO_PinRemapConfig+0xdc>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80011e6:	6053      	str	r3, [r2, #4]
 80011e8:	e021      	b.n	800122e <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00e      	beq.n	8001212 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80011f4:	2203      	movs	r2, #3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4013      	ands	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e00d      	b.n	800122e <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	0d5b      	lsrs	r3, r3, #21
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	4013      	ands	r3, r2
 8001224:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800122c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	0d5b      	lsrs	r3, r3, #21
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4313      	orrs	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	da03      	bge.n	8001254 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <GPIO_PinRemapConfig+0xdc>)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8001252:	e002      	b.n	800125a <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <GPIO_PinRemapConfig+0xdc>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	6053      	str	r3, [r2, #4]
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40010000 	.word	0x40010000

08001268 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001268:	b490      	push	{r4, r7}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800128c:	4916      	ldr	r1, [pc, #88]	; (80012e8 <GPIO_EXTILineConfig+0x80>)
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <GPIO_EXTILineConfig+0x80>)
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3302      	adds	r3, #2
 80012a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	401a      	ands	r2, r3
 80012aa:	1c83      	adds	r3, r0, #2
 80012ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <GPIO_EXTILineConfig+0x80>)
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461c      	mov	r4, r3
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <GPIO_EXTILineConfig+0x80>)
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3302      	adds	r3, #2
 80012c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012c8:	79f9      	ldrb	r1, [r7, #7]
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	431a      	orrs	r2, r3
 80012d8:	1ca3      	adds	r3, r4, #2
 80012da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc90      	pop	{r4, r7}
 80012e6:	4770      	bx	lr
 80012e8:	40010000 	.word	0x40010000

080012ec <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012f0:	4a13      	ldr	r2, [pc, #76]	; (8001340 <RCC_DeInit+0x54>)
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <RCC_DeInit+0x54>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80012fc:	4910      	ldr	r1, [pc, #64]	; (8001340 <RCC_DeInit+0x54>)
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <RCC_DeInit+0x54>)
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <RCC_DeInit+0x58>)
 8001304:	4013      	ands	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <RCC_DeInit+0x54>)
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <RCC_DeInit+0x54>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001318:	4a09      	ldr	r2, [pc, #36]	; (8001340 <RCC_DeInit+0x54>)
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <RCC_DeInit+0x54>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <RCC_DeInit+0x54>)
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <RCC_DeInit+0x54>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800132e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <RCC_DeInit+0x54>)
 8001332:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001336:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40021000 	.word	0x40021000
 8001344:	f8ff0000 	.word	0xf8ff0000

08001348 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <RCC_HSEConfig+0x58>)
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <RCC_HSEConfig+0x58>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 800135c:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <RCC_HSEConfig+0x58>)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <RCC_HSEConfig+0x58>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d003      	beq.n	8001378 <RCC_HSEConfig+0x30>
 8001370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001374:	d007      	beq.n	8001386 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8001376:	e00d      	b.n	8001394 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
 8001378:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <RCC_HSEConfig+0x58>)
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <RCC_HSEConfig+0x58>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
      break;
 8001384:	e006      	b.n	8001394 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8001386:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <RCC_HSEConfig+0x58>)
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <RCC_HSEConfig+0x58>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001390:	6013      	str	r3, [r2, #0]
      break;
 8001392:	bf00      	nop
  }
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <RCC_HSICmd+0x1c>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	42420000 	.word	0x42420000

080013c4 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <RCC_PLLConfig+0x38>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80013de:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <RCC_PLLConfig+0x38>)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6053      	str	r3, [r2, #4]
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000

08001400 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <RCC_PLLCmd+0x1c>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	42420060 	.word	0x42420060

08001420 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <RCC_SYSCLKConfig+0x34>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f023 0303 	bic.w	r3, r3, #3
 8001438:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <RCC_SYSCLKConfig+0x34>)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6053      	str	r3, [r2, #4]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <RCC_HCLKConfig+0x34>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001470:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <RCC_HCLKConfig+0x34>)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6053      	str	r3, [r2, #4]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000

08001490 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <RCC_PCLK1Config+0x34>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014a8:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <RCC_PCLK1Config+0x34>)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6053      	str	r3, [r2, #4]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000

080014c8 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <RCC_PCLK2Config+0x34>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014e0:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80014ec:	4a03      	ldr	r2, [pc, #12]	; (80014fc <RCC_PCLK2Config+0x34>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6053      	str	r3, [r2, #4]
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000

08001500 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <RCC_ADCCLKConfig+0x34>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001518:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4313      	orrs	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <RCC_ADCCLKConfig+0x34>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6053      	str	r3, [r2, #4]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001550:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d007      	beq.n	8001570 <RCC_GetClocksFreq+0x38>
 8001560:	2b08      	cmp	r3, #8
 8001562:	d009      	beq.n	8001578 <RCC_GetClocksFreq+0x40>
 8001564:	2b00      	cmp	r3, #0
 8001566:	d133      	bne.n	80015d0 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a47      	ldr	r2, [pc, #284]	; (8001688 <RCC_GetClocksFreq+0x150>)
 800156c:	601a      	str	r2, [r3, #0]
      break;
 800156e:	e033      	b.n	80015d8 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a45      	ldr	r2, [pc, #276]	; (8001688 <RCC_GetClocksFreq+0x150>)
 8001574:	601a      	str	r2, [r3, #0]
      break;
 8001576:	e02f      	b.n	80015d8 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001578:	4b42      	ldr	r3, [pc, #264]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001580:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001582:	4b40      	ldr	r3, [pc, #256]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	3302      	adds	r3, #2
 8001592:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4a3b      	ldr	r2, [pc, #236]	; (800168c <RCC_GetClocksFreq+0x154>)
 800159e:	fb02 f203 	mul.w	r2, r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80015a6:	e017      	b.n	80015d8 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4a35      	ldr	r2, [pc, #212]	; (800168c <RCC_GetClocksFreq+0x154>)
 80015b8:	fb02 f203 	mul.w	r2, r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	601a      	str	r2, [r3, #0]
      break;
 80015c0:	e00a      	b.n	80015d8 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4a30      	ldr	r2, [pc, #192]	; (8001688 <RCC_GetClocksFreq+0x150>)
 80015c6:	fb02 f203 	mul.w	r2, r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	601a      	str	r2, [r3, #0]
      break;
 80015ce:	e003      	b.n	80015d8 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <RCC_GetClocksFreq+0x150>)
 80015d4:	601a      	str	r2, [r3, #0]
      break;
 80015d6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <RCC_GetClocksFreq+0x158>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	40da      	lsrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001608:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001610:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <RCC_GetClocksFreq+0x158>)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	40da      	lsrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001630:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	0adb      	lsrs	r3, r3, #11
 8001636:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001638:	4a15      	ldr	r2, [pc, #84]	; (8001690 <RCC_GetClocksFreq+0x158>)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	40da      	lsrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001658:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	0b9b      	lsrs	r3, r3, #14
 800165e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001660:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <RCC_GetClocksFreq+0x15c>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	fbb2 f2f3 	udiv	r2, r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	611a      	str	r2, [r3, #16]
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40021000 	.word	0x40021000
 8001688:	007a1200 	.word	0x007a1200
 800168c:	003d0900 	.word	0x003d0900
 8001690:	20000000 	.word	0x20000000
 8001694:	20000010 	.word	0x20000010

08001698 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80016aa:	4909      	ldr	r1, [pc, #36]	; (80016d0 <RCC_AHBPeriphClockCmd+0x38>)
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <RCC_AHBPeriphClockCmd+0x38>)
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80016b6:	e006      	b.n	80016c6 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80016b8:	4905      	ldr	r1, [pc, #20]	; (80016d0 <RCC_AHBPeriphClockCmd+0x38>)
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <RCC_AHBPeriphClockCmd+0x38>)
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4013      	ands	r3, r2
 80016c4:	614b      	str	r3, [r1, #20]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000

080016d4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80016e6:	4909      	ldr	r1, [pc, #36]	; (800170c <RCC_APB2PeriphClockCmd+0x38>)
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <RCC_APB2PeriphClockCmd+0x38>)
 80016ea:	699a      	ldr	r2, [r3, #24]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80016f2:	e006      	b.n	8001702 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80016f4:	4905      	ldr	r1, [pc, #20]	; (800170c <RCC_APB2PeriphClockCmd+0x38>)
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <RCC_APB2PeriphClockCmd+0x38>)
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4013      	ands	r3, r2
 8001700:	618b      	str	r3, [r1, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000

08001710 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d006      	beq.n	8001730 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001722:	4909      	ldr	r1, [pc, #36]	; (8001748 <RCC_APB1PeriphClockCmd+0x38>)
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <RCC_APB1PeriphClockCmd+0x38>)
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4313      	orrs	r3, r2
 800172c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800172e:	e006      	b.n	800173e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001730:	4905      	ldr	r1, [pc, #20]	; (8001748 <RCC_APB1PeriphClockCmd+0x38>)
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <RCC_APB1PeriphClockCmd+0x38>)
 8001734:	69da      	ldr	r2, [r3, #28]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	43db      	mvns	r3, r3
 800173a:	4013      	ands	r3, r2
 800173c:	61cb      	str	r3, [r1, #28]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40021000 	.word	0x40021000

0800174c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <RCC_ClockSecuritySystemCmd+0x1c>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	4242004c 	.word	0x4242004c

0800176c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	095b      	lsrs	r3, r3, #5
 8001786:	b2db      	uxtb	r3, r3
 8001788:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d103      	bne.n	8001798 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <RCC_GetFlagStatus+0x70>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e009      	b.n	80017ac <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d103      	bne.n	80017a6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <RCC_GetFlagStatus+0x70>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e002      	b.n	80017ac <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <RCC_GetFlagStatus+0x70>)
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	74fb      	strb	r3, [r7, #19]
 80017c8:	e001      	b.n	80017ce <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80017ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a2e      	ldr	r2, [pc, #184]	; (80018b0 <TIM_TimeBaseInit+0xd0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <TIM_TimeBaseInit+0x44>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a2d      	ldr	r2, [pc, #180]	; (80018b4 <TIM_TimeBaseInit+0xd4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00f      	beq.n	8001824 <TIM_TimeBaseInit+0x44>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180a:	d00b      	beq.n	8001824 <TIM_TimeBaseInit+0x44>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a2a      	ldr	r2, [pc, #168]	; (80018b8 <TIM_TimeBaseInit+0xd8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <TIM_TimeBaseInit+0x44>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <TIM_TimeBaseInit+0xdc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d003      	beq.n	8001824 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <TIM_TimeBaseInit+0xe0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d108      	bne.n	8001836 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001824:	89fb      	ldrh	r3, [r7, #14]
 8001826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800182a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	885a      	ldrh	r2, [r3, #2]
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	4313      	orrs	r3, r2
 8001834:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <TIM_TimeBaseInit+0xe4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00c      	beq.n	8001858 <TIM_TimeBaseInit+0x78>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <TIM_TimeBaseInit+0xe8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d008      	beq.n	8001858 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001846:	89fb      	ldrh	r3, [r7, #14]
 8001848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800184c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	88da      	ldrh	r2, [r3, #6]
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	4313      	orrs	r3, r2
 8001856:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	89fa      	ldrh	r2, [r7, #14]
 800185c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	889a      	ldrh	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	881a      	ldrh	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <TIM_TimeBaseInit+0xd0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00f      	beq.n	8001896 <TIM_TimeBaseInit+0xb6>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <TIM_TimeBaseInit+0xd4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00b      	beq.n	8001896 <TIM_TimeBaseInit+0xb6>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <TIM_TimeBaseInit+0xec>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d007      	beq.n	8001896 <TIM_TimeBaseInit+0xb6>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <TIM_TimeBaseInit+0xf0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d003      	beq.n	8001896 <TIM_TimeBaseInit+0xb6>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <TIM_TimeBaseInit+0xf4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d104      	bne.n	80018a0 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	7a1b      	ldrb	r3, [r3, #8]
 800189a:	b29a      	uxth	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	829a      	strh	r2, [r3, #20]
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40012c00 	.word	0x40012c00
 80018b4:	40013400 	.word	0x40013400
 80018b8:	40000400 	.word	0x40000400
 80018bc:	40000800 	.word	0x40000800
 80018c0:	40000c00 	.word	0x40000c00
 80018c4:	40001000 	.word	0x40001000
 80018c8:	40001400 	.word	0x40001400
 80018cc:	40014000 	.word	0x40014000
 80018d0:	40014400 	.word	0x40014400
 80018d4:	40014800 	.word	0x40014800

080018d8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	817b      	strh	r3, [r7, #10]
 80018e6:	2300      	movs	r3, #0
 80018e8:	81fb      	strh	r3, [r7, #14]
 80018ea:	2300      	movs	r3, #0
 80018ec:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8c1b      	ldrh	r3, [r3, #32]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	8c1b      	ldrh	r3, [r3, #32]
 8001902:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	889b      	ldrh	r3, [r3, #4]
 8001908:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	8b1b      	ldrh	r3, [r3, #24]
 800190e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8001910:	897b      	ldrh	r3, [r7, #10]
 8001912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001916:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001918:	897b      	ldrh	r3, [r7, #10]
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	897b      	ldrh	r3, [r7, #10]
 8001926:	4313      	orrs	r3, r2
 8001928:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	f023 0302 	bic.w	r3, r3, #2
 8001930:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	891a      	ldrh	r2, [r3, #8]
 8001936:	89fb      	ldrh	r3, [r7, #14]
 8001938:	4313      	orrs	r3, r2
 800193a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	885a      	ldrh	r2, [r3, #2]
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	4313      	orrs	r3, r2
 8001944:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a24      	ldr	r2, [pc, #144]	; (80019dc <TIM_OC1Init+0x104>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00f      	beq.n	800196e <TIM_OC1Init+0x96>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <TIM_OC1Init+0x108>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00b      	beq.n	800196e <TIM_OC1Init+0x96>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <TIM_OC1Init+0x10c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <TIM_OC1Init+0x96>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <TIM_OC1Init+0x110>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d003      	beq.n	800196e <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a20      	ldr	r2, [pc, #128]	; (80019ec <TIM_OC1Init+0x114>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d123      	bne.n	80019b6 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	f023 0308 	bic.w	r3, r3, #8
 8001974:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	895a      	ldrh	r2, [r3, #10]
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	4313      	orrs	r3, r2
 800197e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001980:	89fb      	ldrh	r3, [r7, #14]
 8001982:	f023 0304 	bic.w	r3, r3, #4
 8001986:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	889a      	ldrh	r2, [r3, #4]
 800198c:	89fb      	ldrh	r3, [r7, #14]
 800198e:	4313      	orrs	r3, r2
 8001990:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8001992:	89bb      	ldrh	r3, [r7, #12]
 8001994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001998:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800199a:	89bb      	ldrh	r3, [r7, #12]
 800199c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019a0:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	899a      	ldrh	r2, [r3, #12]
 80019a6:	89bb      	ldrh	r3, [r7, #12]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	89da      	ldrh	r2, [r3, #14]
 80019b0:	89bb      	ldrh	r3, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	89ba      	ldrh	r2, [r7, #12]
 80019ba:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	897a      	ldrh	r2, [r7, #10]
 80019c0:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	88da      	ldrh	r2, [r3, #6]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	89fa      	ldrh	r2, [r7, #14]
 80019ce:	841a      	strh	r2, [r3, #32]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40012c00 	.word	0x40012c00
 80019e0:	40013400 	.word	0x40013400
 80019e4:	40014000 	.word	0x40014000
 80019e8:	40014400 	.word	0x40014400
 80019ec:	40014800 	.word	0x40014800

080019f0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	817b      	strh	r3, [r7, #10]
 80019fe:	2300      	movs	r3, #0
 8001a00:	81fb      	strh	r3, [r7, #14]
 8001a02:	2300      	movs	r3, #0
 8001a04:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	8c1b      	ldrh	r3, [r3, #32]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f023 0310 	bic.w	r3, r3, #16
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	8c1b      	ldrh	r3, [r3, #32]
 8001a1a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	8b1b      	ldrh	r3, [r3, #24]
 8001a26:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8001a28:	897b      	ldrh	r3, [r7, #10]
 8001a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a2e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a36:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	897b      	ldrh	r3, [r7, #10]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8001a46:	89fb      	ldrh	r3, [r7, #14]
 8001a48:	f023 0320 	bic.w	r3, r3, #32
 8001a4c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	891b      	ldrh	r3, [r3, #8]
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	885b      	ldrh	r3, [r3, #2]
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	89fb      	ldrh	r3, [r7, #14]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <TIM_OC2Init+0x108>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d003      	beq.n	8001a7a <TIM_OC2Init+0x8a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <TIM_OC2Init+0x10c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12b      	bne.n	8001ad2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a80:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	895b      	ldrh	r3, [r3, #10]
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	89fb      	ldrh	r3, [r7, #14]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a96:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	889b      	ldrh	r3, [r3, #4]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	89fb      	ldrh	r3, [r7, #14]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8001aa6:	89bb      	ldrh	r3, [r7, #12]
 8001aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aac:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8001aae:	89bb      	ldrh	r3, [r7, #12]
 8001ab0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ab4:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	899b      	ldrh	r3, [r3, #12]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	89bb      	ldrh	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	89db      	ldrh	r3, [r3, #14]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	89bb      	ldrh	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	89ba      	ldrh	r2, [r7, #12]
 8001ad6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	897a      	ldrh	r2, [r7, #10]
 8001adc:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	88da      	ldrh	r2, [r3, #6]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	89fa      	ldrh	r2, [r7, #14]
 8001aea:	841a      	strh	r2, [r3, #32]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40012c00 	.word	0x40012c00
 8001afc:	40013400 	.word	0x40013400

08001b00 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	8859      	ldrh	r1, [r3, #2]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	889a      	ldrh	r2, [r3, #4]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	891b      	ldrh	r3, [r3, #8]
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f96e 	bl	8001e00 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	88db      	ldrh	r3, [r3, #6]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f8bf 	bl	8001cae <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001b30:	e036      	b.n	8001ba0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d10f      	bne.n	8001b5a <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	8859      	ldrh	r1, [r3, #2]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	889a      	ldrh	r2, [r3, #4]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	891b      	ldrh	r3, [r3, #8]
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f9ca 	bl	8001ee0 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	88db      	ldrh	r3, [r3, #6]
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8c6 	bl	8001ce4 <TIM_SetIC2Prescaler>
}
 8001b58:	e022      	b.n	8001ba0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d10f      	bne.n	8001b82 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	8859      	ldrh	r1, [r3, #2]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	889a      	ldrh	r2, [r3, #4]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	891b      	ldrh	r3, [r3, #8]
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fa30 	bl	8001fd4 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	88db      	ldrh	r3, [r3, #6]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8cf 	bl	8001d1e <TIM_SetIC3Prescaler>
}
 8001b80:	e00e      	b.n	8001ba0 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	8859      	ldrh	r1, [r3, #2]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	889a      	ldrh	r2, [r3, #4]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	891b      	ldrh	r3, [r3, #8]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fa96 	bl	80020c0 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	88db      	ldrh	r3, [r3, #6]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8da 	bl	8001d54 <TIM_SetIC4Prescaler>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d008      	beq.n	8001bcc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001bca:	e007      	b.n	8001bdc <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	801a      	strh	r2, [r3, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 8001c10:	e009      	b.n	8001c26 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	899b      	ldrh	r3, [r3, #12]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001c56:	e009      	b.n	8001c6c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	899b      	ldrh	r3, [r3, #12]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4013      	ands	r3, r2
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	819a      	strh	r2, [r3, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	887a      	ldrh	r2, [r7, #2]
 8001c86:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	887a      	ldrh	r2, [r7, #2]
 8001ca2:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	8b1b      	ldrh	r3, [r3, #24]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f023 030c 	bic.w	r3, r3, #12
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8b1b      	ldrh	r3, [r3, #24]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	831a      	strh	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	8b1b      	ldrh	r3, [r3, #24]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	8b1b      	ldrh	r3, [r3, #24]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	831a      	strh	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	8b9b      	ldrh	r3, [r3, #28]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f023 030c 	bic.w	r3, r3, #12
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8b9b      	ldrh	r3, [r3, #28]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	839a      	strh	r2, [r3, #28]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	8b9b      	ldrh	r3, [r3, #28]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	8b9b      	ldrh	r3, [r3, #28]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	839a      	strh	r2, [r3, #28]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	81bb      	strh	r3, [r7, #12]
 8001da2:	2300      	movs	r3, #0
 8001da4:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	8a1b      	ldrh	r3, [r3, #16]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	4013      	ands	r3, r2
 8001db0:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	899b      	ldrh	r3, [r3, #12]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001dbe:	89bb      	ldrh	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <TIM_GetITStatus+0x42>
 8001dc4:	897b      	ldrh	r3, [r7, #10]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	e001      	b.n	8001dd4 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	821a      	strh	r2, [r3, #16]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	817b      	strh	r3, [r7, #10]
 8001e12:	460b      	mov	r3, r1
 8001e14:	813b      	strh	r3, [r7, #8]
 8001e16:	4613      	mov	r3, r2
 8001e18:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	82bb      	strh	r3, [r7, #20]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8c1b      	ldrh	r3, [r3, #32]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8b1b      	ldrh	r3, [r3, #24]
 8001e36:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8c1b      	ldrh	r3, [r3, #32]
 8001e3c:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001e3e:	8abb      	ldrh	r3, [r7, #20]
 8001e40:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001e44:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	893b      	ldrh	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	8abb      	ldrh	r3, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <TI1_Config+0xcc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <TI1_Config+0x88>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <TI1_Config+0xd0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00f      	beq.n	8001e88 <TI1_Config+0x88>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d00b      	beq.n	8001e88 <TI1_Config+0x88>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <TI1_Config+0xd4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <TI1_Config+0x88>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <TI1_Config+0xd8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a16      	ldr	r2, [pc, #88]	; (8001edc <TI1_Config+0xdc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d10b      	bne.n	8001ea0 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8001e88:	8afb      	ldrh	r3, [r7, #22]
 8001e8a:	f023 0302 	bic.w	r3, r3, #2
 8001e8e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001e90:	897a      	ldrh	r2, [r7, #10]
 8001e92:	8afb      	ldrh	r3, [r7, #22]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	82fb      	strh	r3, [r7, #22]
 8001e9e:	e00a      	b.n	8001eb6 <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001ea0:	8afb      	ldrh	r3, [r7, #22]
 8001ea2:	f023 030a 	bic.w	r3, r3, #10
 8001ea6:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001ea8:	897a      	ldrh	r2, [r7, #10]
 8001eaa:	8afb      	ldrh	r3, [r7, #22]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8aba      	ldrh	r2, [r7, #20]
 8001eba:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8afa      	ldrh	r2, [r7, #22]
 8001ec0:	841a      	strh	r2, [r3, #32]
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	40013400 	.word	0x40013400
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	40000800 	.word	0x40000800
 8001edc:	40000c00 	.word	0x40000c00

08001ee0 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	817b      	strh	r3, [r7, #10]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	813b      	strh	r3, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	82bb      	strh	r3, [r7, #20]
 8001efe:	2300      	movs	r3, #0
 8001f00:	82fb      	strh	r3, [r7, #22]
 8001f02:	2300      	movs	r3, #0
 8001f04:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8c1b      	ldrh	r3, [r3, #32]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f023 0310 	bic.w	r3, r3, #16
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8b1b      	ldrh	r3, [r3, #24]
 8001f1a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8c1b      	ldrh	r3, [r3, #32]
 8001f20:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001f22:	897b      	ldrh	r3, [r7, #10]
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001f28:	8abb      	ldrh	r3, [r7, #20]
 8001f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2e:	051b      	lsls	r3, r3, #20
 8001f30:	0d1b      	lsrs	r3, r3, #20
 8001f32:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	031b      	lsls	r3, r3, #12
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	8abb      	ldrh	r3, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001f40:	893b      	ldrh	r3, [r7, #8]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	8abb      	ldrh	r3, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <TI2_Config+0xe0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <TI2_Config+0x9c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <TI2_Config+0xe4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00f      	beq.n	8001f7c <TI2_Config+0x9c>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d00b      	beq.n	8001f7c <TI2_Config+0x9c>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <TI2_Config+0xe8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <TI2_Config+0x9c>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <TI2_Config+0xec>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <TI2_Config+0xf0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10b      	bne.n	8001f94 <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
 8001f7e:	f023 0320 	bic.w	r3, r3, #32
 8001f82:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001f84:	8a7a      	ldrh	r2, [r7, #18]
 8001f86:	8afb      	ldrh	r3, [r7, #22]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	82fb      	strh	r3, [r7, #22]
 8001f92:	e00a      	b.n	8001faa <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001f94:	8afb      	ldrh	r3, [r7, #22]
 8001f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f9a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8001f9c:	897a      	ldrh	r2, [r7, #10]
 8001f9e:	8afb      	ldrh	r3, [r7, #22]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f043 0310 	orr.w	r3, r3, #16
 8001fa8:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8aba      	ldrh	r2, [r7, #20]
 8001fae:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8afa      	ldrh	r2, [r7, #22]
 8001fb4:	841a      	strh	r2, [r3, #32]
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40013400 	.word	0x40013400
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800
 8001fd0:	40000c00 	.word	0x40000c00

08001fd4 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	82bb      	strh	r3, [r7, #20]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	82fb      	strh	r3, [r7, #22]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8c1b      	ldrh	r3, [r3, #32]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8b9b      	ldrh	r3, [r3, #28]
 800200e:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8c1b      	ldrh	r3, [r3, #32]
 8002014:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002016:	897b      	ldrh	r3, [r7, #10]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800201c:	8abb      	ldrh	r3, [r7, #20]
 800201e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8002022:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	b29a      	uxth	r2, r3
 800202a:	893b      	ldrh	r3, [r7, #8]
 800202c:	4313      	orrs	r3, r2
 800202e:	b29a      	uxth	r2, r3
 8002030:	8abb      	ldrh	r3, [r7, #20]
 8002032:	4313      	orrs	r3, r2
 8002034:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <TI3_Config+0xd8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <TI3_Config+0x92>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <TI3_Config+0xdc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00f      	beq.n	8002066 <TI3_Config+0x92>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d00b      	beq.n	8002066 <TI3_Config+0x92>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <TI3_Config+0xe0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <TI3_Config+0x92>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <TI3_Config+0xe4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d003      	beq.n	8002066 <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a16      	ldr	r2, [pc, #88]	; (80020bc <TI3_Config+0xe8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d10b      	bne.n	800207e <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8002066:	8afb      	ldrh	r3, [r7, #22]
 8002068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800206c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800206e:	8a7a      	ldrh	r2, [r7, #18]
 8002070:	8afb      	ldrh	r3, [r7, #22]
 8002072:	4313      	orrs	r3, r2
 8002074:	b29b      	uxth	r3, r3
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	82fb      	strh	r3, [r7, #22]
 800207c:	e00a      	b.n	8002094 <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800207e:	8afb      	ldrh	r3, [r7, #22]
 8002080:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002084:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8002086:	897a      	ldrh	r2, [r7, #10]
 8002088:	8afb      	ldrh	r3, [r7, #22]
 800208a:	4313      	orrs	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8aba      	ldrh	r2, [r7, #20]
 8002098:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8afa      	ldrh	r2, [r7, #22]
 800209e:	841a      	strh	r2, [r3, #32]
}
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40013400 	.word	0x40013400
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00

080020c0 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	817b      	strh	r3, [r7, #10]
 80020d2:	460b      	mov	r3, r1
 80020d4:	813b      	strh	r3, [r7, #8]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	82bb      	strh	r3, [r7, #20]
 80020de:	2300      	movs	r3, #0
 80020e0:	82fb      	strh	r3, [r7, #22]
 80020e2:	2300      	movs	r3, #0
 80020e4:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8c1b      	ldrh	r3, [r3, #32]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8b9b      	ldrh	r3, [r3, #28]
 80020fa:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8c1b      	ldrh	r3, [r3, #32]
 8002100:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8002102:	897b      	ldrh	r3, [r7, #10]
 8002104:	031b      	lsls	r3, r3, #12
 8002106:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002108:	8abb      	ldrh	r3, [r7, #20]
 800210a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210e:	051b      	lsls	r3, r3, #20
 8002110:	0d1b      	lsrs	r3, r3, #20
 8002112:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8002114:	893b      	ldrh	r3, [r7, #8]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	b29a      	uxth	r2, r3
 800211a:	8abb      	ldrh	r3, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	031b      	lsls	r3, r3, #12
 8002124:	b29a      	uxth	r2, r3
 8002126:	8abb      	ldrh	r3, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <TI4_Config+0xe4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <TI4_Config+0x9c>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <TI4_Config+0xe8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00f      	beq.n	800215c <TI4_Config+0x9c>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002142:	d00b      	beq.n	800215c <TI4_Config+0x9c>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a19      	ldr	r2, [pc, #100]	; (80021ac <TI4_Config+0xec>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <TI4_Config+0x9c>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <TI4_Config+0xf0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <TI4_Config+0xf4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d10b      	bne.n	8002174 <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 800215c:	8afb      	ldrh	r3, [r7, #22]
 800215e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002162:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002164:	8a7a      	ldrh	r2, [r7, #18]
 8002166:	8afb      	ldrh	r3, [r7, #22]
 8002168:	4313      	orrs	r3, r2
 800216a:	b29b      	uxth	r3, r3
 800216c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002170:	82fb      	strh	r3, [r7, #22]
 8002172:	e00c      	b.n	800218e <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8002174:	8afb      	ldrh	r3, [r7, #22]
 8002176:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800217a:	045b      	lsls	r3, r3, #17
 800217c:	0c5b      	lsrs	r3, r3, #17
 800217e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002180:	897a      	ldrh	r2, [r7, #10]
 8002182:	8afb      	ldrh	r3, [r7, #22]
 8002184:	4313      	orrs	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800218c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8aba      	ldrh	r2, [r7, #20]
 8002192:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8afa      	ldrh	r2, [r7, #22]
 8002198:	841a      	strh	r2, [r3, #32]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	40012c00 	.word	0x40012c00
 80021a8:	40013400 	.word	0x40013400
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800
 80021b4:	40000c00 	.word	0x40000c00

080021b8 <TIM4_IRQHandler>:

float s=0;

float v=0;

void TIM4_IRQHandler(void){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0


	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET){
 80021bc:	2101      	movs	r1, #1
 80021be:	4862      	ldr	r0, [pc, #392]	; (8002348 <TIM4_IRQHandler+0x190>)
 80021c0:	f7ff fde5 	bl	8001d8e <TIM_GetITStatus>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80bb 	beq.w	8002342 <TIM4_IRQHandler+0x18a>
        TIM_ClearITPendingBit(TIM4,  TIM_IT_Update);
 80021cc:	2101      	movs	r1, #1
 80021ce:	485e      	ldr	r0, [pc, #376]	; (8002348 <TIM4_IRQHandler+0x190>)
 80021d0:	f7ff fe06 	bl	8001de0 <TIM_ClearITPendingBit>

        readADC();
 80021d4:	f000 fb8c 	bl	80028f0 <readADC>

        e_d=e;
 80021d8:	4b5c      	ldr	r3, [pc, #368]	; (800234c <TIM4_IRQHandler+0x194>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a5c      	ldr	r2, [pc, #368]	; (8002350 <TIM4_IRQHandler+0x198>)
 80021de:	6013      	str	r3, [r2, #0]

        e=(adcBuf[1]-adcBuf[2])/e_max; /* L-R */
 80021e0:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <TIM4_IRQHandler+0x19c>)
 80021e2:	885b      	ldrh	r3, [r3, #2]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <TIM4_IRQHandler+0x19c>)
 80021e8:	889b      	ldrh	r3, [r3, #4]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f867 	bl	80002c0 <__aeabi_i2f>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b58      	ldr	r3, [pc, #352]	; (8002358 <TIM4_IRQHandler+0x1a0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f7fe f968 	bl	80004d0 <__aeabi_fdiv>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	4b51      	ldr	r3, [pc, #324]	; (800234c <TIM4_IRQHandler+0x194>)
 8002206:	601a      	str	r2, [r3, #0]

        D=Kd*(e-e_d)/T;
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <TIM4_IRQHandler+0x194>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <TIM4_IRQHandler+0x198>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f7fd ff9e 	bl	8000154 <__aeabi_fsub>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	4b4f      	ldr	r3, [pc, #316]	; (800235c <TIM4_IRQHandler+0x1a4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f7fe f8a0 	bl	8000368 <__aeabi_fmul>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <TIM4_IRQHandler+0x1a8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f7fe f94c 	bl	80004d0 <__aeabi_fdiv>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b49      	ldr	r3, [pc, #292]	; (8002364 <TIM4_IRQHandler+0x1ac>)
 800223e:	601a      	str	r2, [r3, #0]

        I+=Ki*e;
 8002240:	4b49      	ldr	r3, [pc, #292]	; (8002368 <TIM4_IRQHandler+0x1b0>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b41      	ldr	r3, [pc, #260]	; (800234c <TIM4_IRQHandler+0x194>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7fe f88c 	bl	8000368 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	4b45      	ldr	r3, [pc, #276]	; (800236c <TIM4_IRQHandler+0x1b4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f7fd ff7c 	bl	8000158 <__addsf3>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	4b41      	ldr	r3, [pc, #260]	; (800236c <TIM4_IRQHandler+0x1b4>)
 8002266:	601a      	str	r2, [r3, #0]

        if(I>Imax)
 8002268:	4b40      	ldr	r3, [pc, #256]	; (800236c <TIM4_IRQHandler+0x1b4>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b40      	ldr	r3, [pc, #256]	; (8002370 <TIM4_IRQHandler+0x1b8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f7fe fa34 	bl	80006e0 <__aeabi_fcmpgt>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <TIM4_IRQHandler+0xce>
        	I=Imax;
 800227e:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <TIM4_IRQHandler+0x1b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a3a      	ldr	r2, [pc, #232]	; (800236c <TIM4_IRQHandler+0x1b4>)
 8002284:	6013      	str	r3, [r2, #0]
        if(I<-Imax)
 8002286:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <TIM4_IRQHandler+0x1b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <TIM4_IRQHandler+0x1b4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f7fe fa23 	bl	80006e0 <__aeabi_fcmpgt>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <TIM4_IRQHandler+0xf4>
        	I=-Imax;
 80022a0:	4b33      	ldr	r3, [pc, #204]	; (8002370 <TIM4_IRQHandler+0x1b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022a8:	4a30      	ldr	r2, [pc, #192]	; (800236c <TIM4_IRQHandler+0x1b4>)
 80022aa:	6013      	str	r3, [r2, #0]

        I=0;
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <TIM4_IRQHandler+0x1b4>)
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
        s=Kp*e+I+D;
 80022b4:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <TIM4_IRQHandler+0x1bc>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b24      	ldr	r3, [pc, #144]	; (800234c <TIM4_IRQHandler+0x194>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f7fe f852 	bl	8000368 <__aeabi_fmul>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <TIM4_IRQHandler+0x1b4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f7fd ff42 	bl	8000158 <__addsf3>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <TIM4_IRQHandler+0x1ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f7fd ff3a 	bl	8000158 <__addsf3>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b23      	ldr	r3, [pc, #140]	; (8002378 <TIM4_IRQHandler+0x1c0>)
 80022ea:	601a      	str	r2, [r3, #0]


        v=v_max*s/3.5;
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <TIM4_IRQHandler+0x1c4>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <TIM4_IRQHandler+0x1c0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	4610      	mov	r0, r2
 80022f8:	f7fe f836 	bl	8000368 <__aeabi_fmul>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4920      	ldr	r1, [pc, #128]	; (8002380 <TIM4_IRQHandler+0x1c8>)
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f8e5 	bl	80004d0 <__aeabi_fdiv>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <TIM4_IRQHandler+0x1cc>)
 800230c:	601a      	str	r2, [r3, #0]


		MotCtl(v_base+v,MOT_L);
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <TIM4_IRQHandler+0x1d0>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <TIM4_IRQHandler+0x1cc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f7fd ff1d 	bl	8000158 <__addsf3>
 800231e:	4603      	mov	r3, r0
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fbe6 	bl	8002af4 <MotCtl>
		MotCtl(v_base-v,MOT_R);
 8002328:	4b17      	ldr	r3, [pc, #92]	; (8002388 <TIM4_IRQHandler+0x1d0>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <TIM4_IRQHandler+0x1cc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	4610      	mov	r0, r2
 8002334:	f7fd ff0e 	bl	8000154 <__aeabi_fsub>
 8002338:	4603      	mov	r3, r0
 800233a:	2101      	movs	r1, #1
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fbd9 	bl	8002af4 <MotCtl>


   }
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40000800 	.word	0x40000800
 800234c:	2000006c 	.word	0x2000006c
 8002350:	20000070 	.word	0x20000070
 8002354:	20000088 	.word	0x20000088
 8002358:	20000024 	.word	0x20000024
 800235c:	20000020 	.word	0x20000020
 8002360:	20000014 	.word	0x20000014
 8002364:	20000078 	.word	0x20000078
 8002368:	2000001c 	.word	0x2000001c
 800236c:	20000074 	.word	0x20000074
 8002370:	20000028 	.word	0x20000028
 8002374:	20000018 	.word	0x20000018
 8002378:	2000007c 	.word	0x2000007c
 800237c:	2000002c 	.word	0x2000002c
 8002380:	40600000 	.word	0x40600000
 8002384:	20000080 	.word	0x20000080
 8002388:	20000030 	.word	0x20000030

0800238c <InitNav>:
uint16_t timer1_clk;

float d_wheel = 18;/*mm*/
float gear_ratio = 4;/*#cogs_wheel/#cogs_magnet*/

void InitNav(void){
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	InitCapture(&RA);
 8002390:	4804      	ldr	r0, [pc, #16]	; (80023a4 <InitNav+0x18>)
 8002392:	f000 f80b 	bl	80023ac <InitCapture>
	InitCapture(&LA);
 8002396:	4804      	ldr	r0, [pc, #16]	; (80023a8 <InitNav+0x1c>)
 8002398:	f000 f808 	bl	80023ac <InitCapture>
	GetClkFreq();
 800239c:	f000 f82a 	bl	80023f4 <GetClkFreq>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	2000009c 	.word	0x2000009c
 80023a8:	200000b4 	.word	0x200000b4

080023ac <InitCapture>:

void InitCapture(capture* capStruct){
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	capStruct->prev_cap = 0;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	801a      	strh	r2, [r3, #0]
	capStruct->new_cap = 0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	805a      	strh	r2, [r3, #2]
	capStruct->diff_cnt = 0;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	809a      	strh	r2, [r3, #4]
	capStruct->diff_ms = 0;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
	capStruct->d_wheel = 18;/*mm*/
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <InitCapture+0x44>)
 80023d2:	609a      	str	r2, [r3, #8]
	capStruct->w = 0;/*rad/ms*/
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
	capStruct->v = 0;/*mm/s*/
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
	//capStruct->first_cap = 1;
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	41900000 	.word	0x41900000

080023f4 <GetClkFreq>:

void GetClkFreq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef   clkConfStruct;
	RCC_GetClocksFreq(&clkConfStruct);
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f89b 	bl	8001538 <RCC_GetClocksFreq>

	timer1_clk = clkConfStruct.PCLK2_Frequency/1000;/*kHz; if APB2 prescaler = 1!!!*/
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4a05      	ldr	r2, [pc, #20]	; (800241c <GetClkFreq+0x28>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	b29a      	uxth	r2, r3
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <GetClkFreq+0x2c>)
 8002410:	801a      	strh	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	10624dd3 	.word	0x10624dd3
 8002420:	20000098 	.word	0x20000098

08002424 <EXTI9_5_IRQHandler>:
float duty_start = MOT_PWM_MAX_DUTY/2;

uint8_t dir_L = 0, dir_R = 0;
uint8_t go = 0;/*for enabling/disabling control, global variable*/

void EXTI9_5_IRQHandler(void){
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	/*interrupt request from button?*/
	if (EXTI_PR_PR5){
		EXTI_ClearITPendingBit(EXTI_Line5);
 8002428:	2020      	movs	r0, #32
 800242a:	f7fe fd55 	bl	8000ed8 <EXTI_ClearITPendingBit>
		/*do stuff when button pressed*/
		/*start/stop motors*/

		if(!go){
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <EXTI9_5_IRQHandler+0x78>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <EXTI9_5_IRQHandler+0x32>
			go = 1;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <EXTI9_5_IRQHandler+0x78>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
			MotCtl(duty_start, MOT_R);
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <EXTI9_5_IRQHandler+0x7c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fb56 	bl	8002af4 <MotCtl>
			MotCtl(duty_start, MOT_L);
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <EXTI9_5_IRQHandler+0x7c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fb50 	bl	8002af4 <MotCtl>
 8002454:	e00c      	b.n	8002470 <EXTI9_5_IRQHandler+0x4c>
		}
		else {
			MotCtl(0, MOT_R);
 8002456:	2101      	movs	r1, #1
 8002458:	f04f 0000 	mov.w	r0, #0
 800245c:	f000 fb4a 	bl	8002af4 <MotCtl>
			MotCtl(0, MOT_L);
 8002460:	2100      	movs	r1, #0
 8002462:	f04f 0000 	mov.w	r0, #0
 8002466:	f000 fb45 	bl	8002af4 <MotCtl>
			go = 0;
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <EXTI9_5_IRQHandler+0x78>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
		}
	}

	/*interrupt request from encoderL DIR?*/
	if(EXTI_PR_PR8){
		EXTI_ClearITPendingBit(EXTI_Line8);
 8002470:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002474:	f7fe fd30 	bl	8000ed8 <EXTI_ClearITPendingBit>
		if(GPIO_ReadInputDataBit(PORT_ENC_DIR_L, PIN_ENC_DIR_L)){
 8002478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800247c:	4809      	ldr	r0, [pc, #36]	; (80024a4 <EXTI9_5_IRQHandler+0x80>)
 800247e:	f7fe fe36 	bl	80010ee <GPIO_ReadInputDataBit>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <EXTI9_5_IRQHandler+0x6c>
			dir_L = 1;/*to be determined*/
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <EXTI9_5_IRQHandler+0x84>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
		}
		else {
			dir_L = 0;
		}
	}
}
 800248e:	e002      	b.n	8002496 <EXTI9_5_IRQHandler+0x72>
			dir_L = 0;
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <EXTI9_5_IRQHandler+0x84>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000086 	.word	0x20000086
 80024a0:	20000034 	.word	0x20000034
 80024a4:	40010800 	.word	0x40010800
 80024a8:	20000084 	.word	0x20000084

080024ac <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	/*interrupt request from encoderR DIR?*/
	if(EXTI_PR_PR11){
		EXTI_ClearITPendingBit(EXTI_Line11);
 80024b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024b4:	f7fe fd10 	bl	8000ed8 <EXTI_ClearITPendingBit>
		if(GPIO_ReadInputDataBit(PORT_ENC_DIR_R, PIN_ENC_DIR_R)){
 80024b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024bc:	4807      	ldr	r0, [pc, #28]	; (80024dc <EXTI15_10_IRQHandler+0x30>)
 80024be:	f7fe fe16 	bl	80010ee <GPIO_ReadInputDataBit>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <EXTI15_10_IRQHandler+0x24>
			dir_R = 1;/*to be determined*/
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <EXTI15_10_IRQHandler+0x34>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
		}
		else {
			dir_R = 0;
		}
	}
}
 80024ce:	e002      	b.n	80024d6 <EXTI15_10_IRQHandler+0x2a>
			dir_R = 0;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <EXTI15_10_IRQHandler+0x34>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40010800 	.word	0x40010800
 80024e0:	20000085 	.word	0x20000085

080024e4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	da0b      	bge.n	8002510 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80024f8:	490d      	ldr	r1, [pc, #52]	; (8002530 <NVIC_SetPriority+0x4c>)
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	3b04      	subs	r3, #4
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	0112      	lsls	r2, r2, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	440b      	add	r3, r1
 800250c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800250e:	e009      	b.n	8002524 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002510:	4908      	ldr	r1, [pc, #32]	; (8002534 <NVIC_SetPriority+0x50>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	440b      	add	r3, r1
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00
 8002534:	e000e100 	.word	0xe000e100

08002538 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002546:	d301      	bcc.n	800254c <SysTick_Config+0x14>
 8002548:	2301      	movs	r3, #1
 800254a:	e011      	b.n	8002570 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <SysTick_Config+0x40>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002554:	3b01      	subs	r3, #1
 8002556:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8002558:	210f      	movs	r1, #15
 800255a:	f04f 30ff 	mov.w	r0, #4294967295
 800255e:	f7ff ffc1 	bl	80024e4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <SysTick_Config+0x40>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <SysTick_Config+0x40>)
 800256a:	2207      	movs	r2, #7
 800256c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	e000e010 	.word	0xe000e010

0800257c <InitPeriph>:
#include "periph.h"


/* init every peripheral used,  */
void InitPeriph(void){
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	InitRCC();
 8002580:	f000 f80e 	bl	80025a0 <InitRCC>
	InitSysTick();
 8002584:	f000 f848 	bl	8002618 <InitSysTick>

	InitGPIO();
 8002588:	f000 f85c 	bl	8002644 <InitGPIO>

	InitEXTI();
 800258c:	f000 f8c6 	bl	800271c <InitEXTI>

	InitADC();
 8002590:	f000 f926 	bl	80027e0 <InitADC>
	InitTIM();
 8002594:	f000 f91a 	bl	80027cc <InitTIM>

	//InitUSART();
	//InitNVIC();
	//InitI2C();
#ifdef _DEBUG
	InitDBG();
 8002598:	f000 f9ec 	bl	8002974 <InitDBG>
#endif
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <InitRCC>:


void InitRCC(void){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0

	RCC_DeInit();
 80025a4:	f7fe fea2 	bl	80012ec <RCC_DeInit>
	RCC_ClockSecuritySystemCmd(DISABLE);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff f8cf 	bl	800174c <RCC_ClockSecuritySystemCmd>

	/* disable HSE */
	RCC_HSEConfig(RCC_HSE_OFF);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7fe feca 	bl	8001348 <RCC_HSEConfig>

	/* enable HSI, 8 Mhz */
	RCC_HSICmd(ENABLE);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7fe fef5 	bl	80013a4 <RCC_HSICmd>

	/* Wait till HSI is ready */
	while (RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 80025ba:	bf00      	nop
 80025bc:	2021      	movs	r0, #33	; 0x21
 80025be:	f7ff f8d5 	bl	800176c <RCC_GetFlagStatus>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f9      	beq.n	80025bc <InitRCC+0x1c>

	RCC_PLLConfig(RCC_PLLSource_HSI_Div2, RCC_PLLMul_16);
 80025c8:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7fe fef9 	bl	80013c4 <RCC_PLLConfig>
	RCC_PLLCmd(ENABLE);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7fe ff14 	bl	8001400 <RCC_PLLCmd>
	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 80025d8:	bf00      	nop
 80025da:	2039      	movs	r0, #57	; 0x39
 80025dc:	f7ff f8c6 	bl	800176c <RCC_GetFlagStatus>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f9      	beq.n	80025da <InitRCC+0x3a>

	FLASH_SetLatency(FLASH_Latency_1);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7fe fc84 	bl	8000ef4 <FLASH_SetLatency>
	FLASH_Unlock();
 80025ec:	f7fe fc9e 	bl	8000f2c <FLASH_Unlock>
	/* Set PLLCLK as sys clock*/
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); /* 64 MHz */
 80025f0:	2002      	movs	r0, #2
 80025f2:	f7fe ff15 	bl	8001420 <RCC_SYSCLKConfig>



	/* Set HCLK, PCLK1, and PCLK2 */
	RCC_HCLKConfig(RCC_SYSCLK_Div1);	/* 64 MHz */
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe ff2e 	bl	8001458 <RCC_HCLKConfig>
	RCC_PCLK1Config(RCC_HCLK_Div2); 	/* 32 MHz */
 80025fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002600:	f7fe ff46 	bl	8001490 <RCC_PCLK1Config>
	RCC_PCLK2Config(RCC_HCLK_Div1); 	/* 64 MHz */
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe ff5f 	bl	80014c8 <RCC_PCLK2Config>

	/* Set ADC clk */
	RCC_ADCCLKConfig(RCC_PCLK2_Div6); /* 10.6 MHz */
 800260a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800260e:	f7fe ff77 	bl	8001500 <RCC_ADCCLKConfig>

#ifdef _DEBUG_MCO
	RCC_MCOConfig(RCC_MCO_SYSCLK); /*output SYSCLK on PA8, GPIO_Pin_PA8 must be AFIO */
#endif
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <InitSysTick>:

void InitSysTick(void){
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef   clkConfStruct;
	RCC_GetClocksFreq(&clkConfStruct);
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe ff89 	bl	8001538 <RCC_GetClocksFreq>

	SysTick_Config(clkConfStruct.SYSCLK_Frequency/10000-1); /* 0.1ms/SysClk tick */
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a05      	ldr	r2, [pc, #20]	; (8002640 <InitSysTick+0x28>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0b5b      	lsrs	r3, r3, #13
 8002630:	3b01      	subs	r3, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff80 	bl	8002538 <SysTick_Config>
}
 8002638:	bf00      	nop
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	d1b71759 	.word	0xd1b71759

08002644 <InitGPIO>:



void InitGPIO(void){
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800264a:	2101      	movs	r1, #1
 800264c:	2004      	movs	r0, #4
 800264e:	f7ff f841 	bl	80016d4 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002652:	2101      	movs	r1, #1
 8002654:	2008      	movs	r0, #8
 8002656:	f7ff f83d 	bl	80016d4 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 800265a:	2101      	movs	r1, #1
 800265c:	2001      	movs	r0, #1
 800265e:	f7ff f839 	bl	80016d4 <RCC_APB2PeriphClockCmd>

	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); /* frees up PB3 and PA15 */
 8002662:	2101      	movs	r1, #1
 8002664:	4829      	ldr	r0, [pc, #164]	; (800270c <InitGPIO+0xc8>)
 8002666:	f7fe fd8f 	bl	8001188 <GPIO_PinRemapConfig>
	GPIO_PinRemapConfig(GPIO_PartialRemap1_TIM2, ENABLE); /* TIM2_CH1=PA15, TIM2_CH2=PB3 */
 800266a:	2101      	movs	r1, #1
 800266c:	4828      	ldr	r0, [pc, #160]	; (8002710 <InitGPIO+0xcc>)
 800266e:	f7fe fd8b 	bl	8001188 <GPIO_PinRemapConfig>

	GPIO_InitTypeDef GPIOInitStruct;
	GPIO_StructInit(&GPIOInitStruct);
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fd27 	bl	80010c8 <GPIO_StructInit>

	GPIOInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800267a:	2303      	movs	r3, #3
 800267c:	71bb      	strb	r3, [r7, #6]

	/* GPIOA, outputs */
	GPIOInitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 800267e:	2310      	movs	r3, #16
 8002680:	71fb      	strb	r3, [r7, #7]
	GPIOInitStruct.GPIO_Pin= PIN_D_RS | PIN_D_RF;
 8002682:	23c0      	movs	r3, #192	; 0xc0
 8002684:	80bb      	strh	r3, [r7, #4]

	GPIO_Init(GPIOA, &GPIOInitStruct);
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4822      	ldr	r0, [pc, #136]	; (8002714 <InitGPIO+0xd0>)
 800268c:	f7fe fc60 	bl	8000f50 <GPIO_Init>

	/* GPIOA, inputs */
	GPIOInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002690:	2304      	movs	r3, #4
 8002692:	71fb      	strb	r3, [r7, #7]
	GPIOInitStruct.GPIO_Pin= PIN_ENC_IDX_R | PIN_ENC_LSB_R | PIN_ENC_DIR_R | PIN_ENC_LSB_L | PIN_ENC_DIR_L;
 8002694:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002698:	80bb      	strh	r3, [r7, #4]

	GPIO_Init(GPIOA, &GPIOInitStruct);
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	4619      	mov	r1, r3
 800269e:	481d      	ldr	r0, [pc, #116]	; (8002714 <InitGPIO+0xd0>)
 80026a0:	f7fe fc56 	bl	8000f50 <GPIO_Init>

	/* GPIOA, analog in */
	GPIOInitStruct.GPIO_Mode = GPIO_Mode_AIN;
 80026a4:	2300      	movs	r3, #0
 80026a6:	71fb      	strb	r3, [r7, #7]
	GPIOInitStruct.GPIO_Pin= PIN_ADC1_IN0 | PIN_ADC1_IN1 | PIN_ADC1_IN3 | PIN_ADC1_IN4;
 80026a8:	231b      	movs	r3, #27
 80026aa:	80bb      	strh	r3, [r7, #4]

	GPIO_Init(GPIOA, &GPIOInitStruct);
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	4619      	mov	r1, r3
 80026b0:	4818      	ldr	r0, [pc, #96]	; (8002714 <InitGPIO+0xd0>)
 80026b2:	f7fe fc4d 	bl	8000f50 <GPIO_Init>

	/* GPIOA, afio */
	GPIOInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 80026b6:	2318      	movs	r3, #24
 80026b8:	71fb      	strb	r3, [r7, #7]
	GPIOInitStruct.GPIO_Pin =PIN_DRV_AE;
 80026ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026be:	80bb      	strh	r3, [r7, #4]

	GPIO_Init(GPIOA, &GPIOInitStruct);
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4813      	ldr	r0, [pc, #76]	; (8002714 <InitGPIO+0xd0>)
 80026c6:	f7fe fc43 	bl	8000f50 <GPIO_Init>


	/**************/

	/* GPIOB, outputs */
	GPIOInitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 80026ca:	2310      	movs	r3, #16
 80026cc:	71fb      	strb	r3, [r7, #7]
	GPIOInitStruct.GPIO_Pin= PIN_D_LS | PIN_D_LF | PIN_LED0 | PIN_LED1 | PIN_DRV_AP | PIN_DRV_BP;
 80026ce:	f245 3303 	movw	r3, #21251	; 0x5303
 80026d2:	80bb      	strh	r3, [r7, #4]

	GPIO_Init(GPIOB, &GPIOInitStruct);
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	480f      	ldr	r0, [pc, #60]	; (8002718 <InitGPIO+0xd4>)
 80026da:	f7fe fc39 	bl	8000f50 <GPIO_Init>

	/* GPIOB, inputs */
	GPIOInitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80026de:	2304      	movs	r3, #4
 80026e0:	71fb      	strb	r3, [r7, #7]
	GPIOInitStruct.GPIO_Pin= PIN_SW0 | PIN_ENC_IDX_L;
 80026e2:	f248 0320 	movw	r3, #32800	; 0x8020
 80026e6:	80bb      	strh	r3, [r7, #4]

	GPIO_Init(GPIOB, &GPIOInitStruct);
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	480a      	ldr	r0, [pc, #40]	; (8002718 <InitGPIO+0xd4>)
 80026ee:	f7fe fc2f 	bl	8000f50 <GPIO_Init>

	/* GPIOB, afio */
	GPIOInitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 80026f2:	2318      	movs	r3, #24
 80026f4:	71fb      	strb	r3, [r7, #7]
	GPIOInitStruct.GPIO_Pin =PIN_DRV_BE;
 80026f6:	2308      	movs	r3, #8
 80026f8:	80bb      	strh	r3, [r7, #4]

	GPIO_Init(GPIOB, &GPIOInitStruct);
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	4619      	mov	r1, r3
 80026fe:	4806      	ldr	r0, [pc, #24]	; (8002718 <InitGPIO+0xd4>)
 8002700:	f7fe fc26 	bl	8000f50 <GPIO_Init>
	GPIOInitStruct.GPIO_Pin =GPIO_Pin_8;

	GPIO_Init(GPIOA, &GPIOInitStruct);
#endif

}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	00300200 	.word	0x00300200
 8002710:	00180100 	.word	0x00180100
 8002714:	40010800 	.word	0x40010800
 8002718:	40010c00 	.word	0x40010c00

0800271c <InitEXTI>:


void InitEXTI(void){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0

	EXTI_InitTypeDef EXTI_InitStructure;

	/*button0*/
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource5);
 8002722:	2105      	movs	r1, #5
 8002724:	2001      	movs	r0, #1
 8002726:	f7fe fd9f 	bl	8001268 <GPIO_EXTILineConfig>

	EXTI_InitStructure.EXTI_Line=EXTI_Line5;
 800272a:	2320      	movs	r3, #32
 800272c:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode=EXTI_Mode_Interrupt;
 800272e:	2300      	movs	r3, #0
 8002730:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger=EXTI_Trigger_Falling;
 8002732:	230c      	movs	r3, #12
 8002734:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd=ENABLE;
 8002736:	2301      	movs	r3, #1
 8002738:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fb58 	bl	8000df4 <EXTI_Init>

	/*encoderL DIR*/
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA,GPIO_PinSource8);
 8002744:	2108      	movs	r1, #8
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fd8e 	bl	8001268 <GPIO_EXTILineConfig>

	EXTI_InitStructure.EXTI_Line=EXTI_Line8;
 800274c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002750:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode=EXTI_Mode_Interrupt;
 8002752:	2300      	movs	r3, #0
 8002754:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger=EXTI_Trigger_Rising_Falling;
 8002756:	2310      	movs	r3, #16
 8002758:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd=ENABLE;
 800275a:	2301      	movs	r3, #1
 800275c:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 800275e:	f107 0308 	add.w	r3, r7, #8
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fb46 	bl	8000df4 <EXTI_Init>

	/*encoderR DIR*/
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA,GPIO_PinSource11);
 8002768:	210b      	movs	r1, #11
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe fd7c 	bl	8001268 <GPIO_EXTILineConfig>

	EXTI_InitStructure.EXTI_Line=EXTI_Line11;
 8002770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002774:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode=EXTI_Mode_Interrupt;
 8002776:	2300      	movs	r3, #0
 8002778:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger=EXTI_Trigger_Rising_Falling;
 800277a:	2310      	movs	r3, #16
 800277c:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd=ENABLE;
 800277e:	2301      	movs	r3, #1
 8002780:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8002782:	f107 0308 	add.w	r3, r7, #8
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fb34 	bl	8000df4 <EXTI_Init>

	/*nvic*/
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_3);
 800278c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002790:	f7fd ffd0 	bl	8000734 <NVIC_PriorityGroupConfig>
	NVIC_InitTypeDef nvicStructure;

	/*button0+encL_DIR nvic*/
	nvicStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8002794:	2317      	movs	r3, #23
 8002796:	713b      	strb	r3, [r7, #4]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	717b      	strb	r3, [r7, #5]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	71bb      	strb	r3, [r7, #6]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&nvicStructure);
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd ffd6 	bl	8000758 <NVIC_Init>

	/*encR_DIR nvic*/
	nvicStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 80027ac:	2328      	movs	r3, #40	; 0x28
 80027ae:	713b      	strb	r3, [r7, #4]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	717b      	strb	r3, [r7, #5]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	71bb      	strb	r3, [r7, #6]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&nvicStructure);
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd ffca 	bl	8000758 <NVIC_Init>
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <InitTIM>:

void InitTIM(void){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	InitTIM1();
 80027d0:	f000 f8d6 	bl	8002980 <InitTIM1>
	InitTIM2();
 80027d4:	f000 f91a 	bl	8002a0c <InitTIM2>
	InitTIM4();
 80027d8:	f000 f95a 	bl	8002a90 <InitTIM4>
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <InitADC>:



void InitADC(void){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b090      	sub	sp, #64	; 0x40
 80027e4:	af00      	add	r7, sp, #0

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80027e6:	2101      	movs	r1, #1
 80027e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027ec:	f7fe ff72 	bl	80016d4 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 80027f0:	2101      	movs	r1, #1
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7fe ff50 	bl	8001698 <RCC_AHBPeriphClockCmd>

	ADC_InitTypeDef ADC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;


	DMA_DeInit(DMA1_Channel1);
 80027f8:	4839      	ldr	r0, [pc, #228]	; (80028e0 <InitADC+0x100>)
 80027fa:	f7fe fa01 	bl	8000c00 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <InitADC+0x104>)
 8002800:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)adcBuf;
 8002802:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <InitADC+0x108>)
 8002804:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_BufferSize = 4;
 800280a:	2304      	movs	r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8002816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800281a:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800281c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002820:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002822:	2320      	movs	r3, #32
 8002824:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8002826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8002830:	463b      	mov	r3, r7
 8002832:	4619      	mov	r1, r3
 8002834:	482a      	ldr	r0, [pc, #168]	; (80028e0 <InitADC+0x100>)
 8002836:	f7fe fa9f 	bl	8000d78 <DMA_Init>

	//DMA_Cmd(DMA1_Channel1, ENABLE);

	/* ADC1 configuration */
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 800283a:	2300      	movs	r3, #0
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
	ADC_InitStructure.ADC_ScanConvMode =DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 800284a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002850:	2300      	movs	r3, #0
 8002852:	63bb      	str	r3, [r7, #56]	; 0x38
	ADC_InitStructure.ADC_NbrOfChannel = 4;
 8002854:	2304      	movs	r3, #4
 8002856:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	ADC_Init(ADC1, &ADC_InitStructure);
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	4619      	mov	r1, r3
 8002860:	4822      	ldr	r0, [pc, #136]	; (80028ec <InitADC+0x10c>)
 8002862:	f7fd ffdb 	bl	800081c <ADC_Init>
	/* ADC1 regular channels configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SAMPLE_TIME);
 8002866:	2304      	movs	r3, #4
 8002868:	2201      	movs	r2, #1
 800286a:	2100      	movs	r1, #0
 800286c:	481f      	ldr	r0, [pc, #124]	; (80028ec <InitADC+0x10c>)
 800286e:	f7fe f8e5 	bl	8000a3c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 2, ADC_SAMPLE_TIME);
 8002872:	2304      	movs	r3, #4
 8002874:	2202      	movs	r2, #2
 8002876:	2103      	movs	r1, #3
 8002878:	481c      	ldr	r0, [pc, #112]	; (80028ec <InitADC+0x10c>)
 800287a:	f7fe f8df 	bl	8000a3c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 3, ADC_SAMPLE_TIME);
 800287e:	2304      	movs	r3, #4
 8002880:	2203      	movs	r2, #3
 8002882:	2101      	movs	r1, #1
 8002884:	4819      	ldr	r0, [pc, #100]	; (80028ec <InitADC+0x10c>)
 8002886:	f7fe f8d9 	bl	8000a3c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SAMPLE_TIME);
 800288a:	2304      	movs	r3, #4
 800288c:	2204      	movs	r2, #4
 800288e:	2104      	movs	r1, #4
 8002890:	4816      	ldr	r0, [pc, #88]	; (80028ec <InitADC+0x10c>)
 8002892:	f7fe f8d3 	bl	8000a3c <ADC_RegularChannelConfig>

	ADC_DiscModeChannelCountConfig(ADC1,1);
 8002896:	2101      	movs	r1, #1
 8002898:	4814      	ldr	r0, [pc, #80]	; (80028ec <InitADC+0x10c>)
 800289a:	f7fe f893 	bl	80009c4 <ADC_DiscModeChannelCountConfig>

	ADC_DiscModeCmd(ADC1,ENABLE);
 800289e:	2101      	movs	r1, #1
 80028a0:	4812      	ldr	r0, [pc, #72]	; (80028ec <InitADC+0x10c>)
 80028a2:	f7fe f8b0 	bl	8000a06 <ADC_DiscModeCmd>
	/* Enable ADC1 DMA */
	//ADC_DMACmd(ADC1, ENABLE);
	ADC_Cmd(ADC1,ENABLE);
 80028a6:	2101      	movs	r1, #1
 80028a8:	4810      	ldr	r0, [pc, #64]	; (80028ec <InitADC+0x10c>)
 80028aa:	f7fe f809 	bl	80008c0 <ADC_Cmd>

	/* Enable ADC1 reset calibaration register */
	ADC_ResetCalibration(ADC1);
 80028ae:	480f      	ldr	r0, [pc, #60]	; (80028ec <InitADC+0x10c>)
 80028b0:	f7fe f821 	bl	80008f6 <ADC_ResetCalibration>
	/* Check the end of ADC1 reset calibration register */
	while(ADC_GetResetCalibrationStatus(ADC1));
 80028b4:	bf00      	nop
 80028b6:	480d      	ldr	r0, [pc, #52]	; (80028ec <InitADC+0x10c>)
 80028b8:	f7fe f82c 	bl	8000914 <ADC_GetResetCalibrationStatus>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f9      	bne.n	80028b6 <InitADC+0xd6>
	/* Start ADC1 calibaration */
	ADC_StartCalibration(ADC1);
 80028c2:	480a      	ldr	r0, [pc, #40]	; (80028ec <InitADC+0x10c>)
 80028c4:	f7fe f83d 	bl	8000942 <ADC_StartCalibration>
	/* Check the end of ADC1 calibration */
	while(ADC_GetCalibrationStatus(ADC1));
 80028c8:	bf00      	nop
 80028ca:	4808      	ldr	r0, [pc, #32]	; (80028ec <InitADC+0x10c>)
 80028cc:	f7fe f848 	bl	8000960 <ADC_GetCalibrationStatus>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f9      	bne.n	80028ca <InitADC+0xea>
}
 80028d6:	bf00      	nop
 80028d8:	3740      	adds	r7, #64	; 0x40
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40020008 	.word	0x40020008
 80028e4:	4001244c 	.word	0x4001244c
 80028e8:	20000088 	.word	0x20000088
 80028ec:	40012400 	.word	0x40012400

080028f0 <readADC>:
					PORT_D_RF,
					PORT_D_LS};

uint16_t adcBuf[4]={0};

void readADC(void){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<4;i++){
 80028f6:	2300      	movs	r3, #0
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	e02b      	b.n	8002954 <readADC+0x64>

		GPIO_SetBits(ledPorts[i], ledPins[i]);
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	4a19      	ldr	r2, [pc, #100]	; (8002964 <readADC+0x74>)
 8002900:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <readADC+0x78>)
 8002908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800290c:	4619      	mov	r1, r3
 800290e:	f7fe fc07 	bl	8001120 <GPIO_SetBits>

		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8002912:	2101      	movs	r1, #1
 8002914:	4815      	ldr	r0, [pc, #84]	; (800296c <readADC+0x7c>)
 8002916:	f7fe f83a 	bl	800098e <ADC_SoftwareStartConvCmd>

		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);   /* Wait until conversion completion */
 800291a:	bf00      	nop
 800291c:	2102      	movs	r1, #2
 800291e:	4813      	ldr	r0, [pc, #76]	; (800296c <readADC+0x7c>)
 8002920:	f7fe f955 	bl	8000bce <ADC_GetFlagStatus>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f8      	beq.n	800291c <readADC+0x2c>

		GPIO_ResetBits(ledPorts[i], ledPins[i]);
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <readADC+0x74>)
 800292e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <readADC+0x78>)
 8002936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800293a:	4619      	mov	r1, r3
 800293c:	f7fe fbfe 	bl	800113c <GPIO_ResetBits>


		adcBuf[i]=ADC1->DR;
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <readADC+0x7c>)
 8002944:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002946:	b291      	uxth	r1, r2
 8002948:	4a09      	ldr	r2, [pc, #36]	; (8002970 <readADC+0x80>)
 800294a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0;i<4;i++){
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	3301      	adds	r3, #1
 8002952:	71fb      	strb	r3, [r7, #7]
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d9d0      	bls.n	80028fc <readADC+0xc>


	}
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000040 	.word	0x20000040
 8002968:	20000038 	.word	0x20000038
 800296c:	40012400 	.word	0x40012400
 8002970:	20000088 	.word	0x20000088

08002974 <InitDBG>:




void InitDBG(void){
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0


}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <InitTIM1>:

/*Input Capture for encoders*/
void InitTIM1(void){
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002986:	2101      	movs	r1, #1
 8002988:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800298c:	f7fe fec0 	bl	8001710 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_ICInitTypeDef  TIM_ICInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Prescaler =0 ;
 8002990:	2300      	movs	r3, #0
 8002992:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002994:	2300      	movs	r3, #0
 8002996:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseStructure.TIM_Period = 64000-1; /* 1kHz */
 8002998:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 800299c:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800299e:	2300      	movs	r3, #0
 80029a0:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	773b      	strb	r3, [r7, #28]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029b0:	f7fe ff16 	bl	80017e0 <TIM_TimeBaseInit>

	TIM_ICInitStructure.TIM_Channel = TIM_Channel_1 | TIM_Channel_2 | TIM_Channel_3 | TIM_Channel_4;
 80029b4:	230c      	movs	r3, #12
 80029b6:	813b      	strh	r3, [r7, #8]
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
 80029b8:	2300      	movs	r3, #0
 80029ba:	817b      	strh	r3, [r7, #10]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 80029bc:	2301      	movs	r3, #1
 80029be:	81bb      	strh	r3, [r7, #12]
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80029c0:	2300      	movs	r3, #0
 80029c2:	81fb      	strh	r3, [r7, #14]
	TIM_ICInitStructure.TIM_ICFilter= 0x03;
 80029c4:	2303      	movs	r3, #3
 80029c6:	823b      	strh	r3, [r7, #16]

	TIM_ICInit(TIM1, &TIM_ICInitStructure);
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	4619      	mov	r1, r3
 80029ce:	480e      	ldr	r0, [pc, #56]	; (8002a08 <InitTIM1+0x88>)
 80029d0:	f7ff f896 	bl	8001b00 <TIM_ICInit>

	/*TIM1 counter enable*/
	TIM_Cmd(TIM1, ENABLE);
 80029d4:	2101      	movs	r1, #1
 80029d6:	480c      	ldr	r0, [pc, #48]	; (8002a08 <InitTIM1+0x88>)
 80029d8:	f7ff f8e6 	bl	8001ba8 <TIM_Cmd>

	/*configuring interrupt*/
	TIM_ITConfig(TIM2,(TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4),ENABLE);
 80029dc:	2201      	movs	r2, #1
 80029de:	211e      	movs	r1, #30
 80029e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029e4:	f7ff f924 	bl	8001c30 <TIM_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel=TIM1_CC_IRQn;
 80029e8:	231b      	movs	r3, #27
 80029ea:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority=1;
 80029f4:	2301      	movs	r3, #1
 80029f6:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd feac 	bl	8000758 <NVIC_Init>


}
 8002a00:	bf00      	nop
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40012c00 	.word	0x40012c00

08002a0c <InitTIM2>:

void InitTIM2(void){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002a12:	2101      	movs	r1, #1
 8002a14:	2001      	movs	r0, #1
 8002a16:	f7fe fe7b 	bl	8001710 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;


	TIM_TimeBaseStructure.TIM_Prescaler =0 ;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseStructure.TIM_Period = MOT_PWM_T-1; /* 10kHz */
 8002a22:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8002a26:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	773b      	strb	r3, [r7, #28]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a3a:	f7fe fed1 	bl	80017e0 <TIM_TimeBaseInit>

	/* Channel 1, 2,3 and 4 Configuration in PWM mode */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002a3e:	2360      	movs	r3, #96	; 0x60
 8002a40:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002a42:	2301      	movs	r3, #1
 8002a44:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;
 8002a46:	2300      	movs	r3, #0
 8002a48:	813b      	strh	r3, [r7, #8]

	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	81bb      	strh	r3, [r7, #12]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	823b      	strh	r3, [r7, #16]

	TIM_OCInitStructure.TIM_Pulse = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	817b      	strh	r3, [r7, #10]
	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a5e:	f7fe ff3b 	bl	80018d8 <TIM_OC1Init>

	TIM_OCInitStructure.TIM_Pulse = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	817b      	strh	r3, [r7, #10]
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a6e:	f7fe ffbf 	bl	80019f0 <TIM_OC2Init>

	/* TIM2 counter enable */
	TIM_Cmd(TIM2, ENABLE);
 8002a72:	2101      	movs	r1, #1
 8002a74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a78:	f7ff f896 	bl	8001ba8 <TIM_Cmd>

	/* TIM2 Main Output Enable */
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a82:	f7ff f8b0 	bl	8001be6 <TIM_CtrlPWMOutputs>
}
 8002a86:	bf00      	nop
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <InitTIM4>:



/* timer for control loop */
void InitTIM4(void){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002a96:	2101      	movs	r1, #1
 8002a98:	2004      	movs	r0, #4
 8002a9a:	f7fe fe39 	bl	8001710 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

	TIM_TimeBaseStructure.TIM_Prescaler =0 ;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStructure.TIM_Period = 64000-1; /* 1kHz */
 8002aa6:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 8002aaa:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	733b      	strb	r3, [r7, #12]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480d      	ldr	r0, [pc, #52]	; (8002af0 <InitTIM4+0x60>)
 8002aba:	f7fe fe91 	bl	80017e0 <TIM_TimeBaseInit>



	NVIC_InitTypeDef nvicStructure;

	nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8002abe:	231e      	movs	r3, #30
 8002ac0:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8002aca:	2301      	movs	r3, #1
 8002acc:	70fb      	strb	r3, [r7, #3]

	NVIC_Init(&nvicStructure);
 8002ace:	463b      	mov	r3, r7
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fe41 	bl	8000758 <NVIC_Init>

	TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <InitTIM4+0x60>)
 8002adc:	f7ff f8a8 	bl	8001c30 <TIM_ITConfig>

	/* TIM4 counter enable */
	TIM_Cmd(TIM4, ENABLE);
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4803      	ldr	r0, [pc, #12]	; (8002af0 <InitTIM4+0x60>)
 8002ae4:	f7ff f860 	bl	8001ba8 <TIM_Cmd>
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40000800 	.word	0x40000800

08002af4 <MotCtl>:




/* eg.: MotCtl(0.12, MOT_FRW, MOT_L) */
void MotCtl(float duty,uint8_t side){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	70fb      	strb	r3, [r7, #3]
	if(duty<MOT_PWM_MAX_DUTY && duty>-MOT_PWM_MAX_DUTY && go){
 8002b00:	492a      	ldr	r1, [pc, #168]	; (8002bac <MotCtl+0xb8>)
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fd fdce 	bl	80006a4 <__aeabi_fcmplt>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d100      	bne.n	8002b10 <MotCtl+0x1c>
		}
		else{
			//invalid. assert?
		}
	}
}
 8002b0e:	e048      	b.n	8002ba2 <MotCtl+0xae>
	if(duty<MOT_PWM_MAX_DUTY && duty>-MOT_PWM_MAX_DUTY && go){
 8002b10:	4927      	ldr	r1, [pc, #156]	; (8002bb0 <MotCtl+0xbc>)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd fde4 	bl	80006e0 <__aeabi_fcmpgt>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d100      	bne.n	8002b20 <MotCtl+0x2c>
}
 8002b1e:	e040      	b.n	8002ba2 <MotCtl+0xae>
	if(duty<MOT_PWM_MAX_DUTY && duty>-MOT_PWM_MAX_DUTY && go){
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <MotCtl+0xc0>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d03c      	beq.n	8002ba2 <MotCtl+0xae>
		uint16_t newC=(float)MOT_PWM_T*fabsf(duty);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b2e:	4922      	ldr	r1, [pc, #136]	; (8002bb8 <MotCtl+0xc4>)
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fc19 	bl	8000368 <__aeabi_fmul>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fddb 	bl	80006f4 <__aeabi_f2uiz>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	81bb      	strh	r3, [r7, #12]
		BitAction phase = MOT_FRW;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
		if(duty<0)
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fd fdaa 	bl	80006a4 <__aeabi_fcmplt>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <MotCtl+0x68>
			phase=MOT_REV;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	e001      	b.n	8002b60 <MotCtl+0x6c>
			phase=MOT_FRW;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
		if(side==MOT_L){
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <MotCtl+0x8e>
			TIM_SetCompare1(TIM2,newC);
 8002b66:	89bb      	ldrh	r3, [r7, #12]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b6e:	f7ff f882 	bl	8001c76 <TIM_SetCompare1>
			GPIO_WriteBit(PORT_DRV_AP,PIN_DRV_AP,phase);
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	461a      	mov	r2, r3
 8002b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b7a:	4810      	ldr	r0, [pc, #64]	; (8002bbc <MotCtl+0xc8>)
 8002b7c:	f7fe faec 	bl	8001158 <GPIO_WriteBit>
}
 8002b80:	e00f      	b.n	8002ba2 <MotCtl+0xae>
		else if(side==MOT_R){
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d10c      	bne.n	8002ba2 <MotCtl+0xae>
			TIM_SetCompare2(TIM2,newC);
 8002b88:	89bb      	ldrh	r3, [r7, #12]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b90:	f7ff f87f 	bl	8001c92 <TIM_SetCompare2>
			GPIO_WriteBit(PORT_DRV_BP,PIN_DRV_BP,phase);
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b9c:	4807      	ldr	r0, [pc, #28]	; (8002bbc <MotCtl+0xc8>)
 8002b9e:	f7fe fadb 	bl	8001158 <GPIO_WriteBit>
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	3f4ccccd 	.word	0x3f4ccccd
 8002bb0:	bf4ccccd 	.word	0xbf4ccccd
 8002bb4:	20000086 	.word	0x20000086
 8002bb8:	467a0000 	.word	0x467a0000
 8002bbc:	40010c00 	.word	0x40010c00

08002bc0 <SysTick_Handler>:
__IO uint32_t SysTickCnt=0;


__IO uint8_t hbState=0; /* heartbeat */

void SysTick_Handler(void){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	SysTickCnt++;
 8002bc4:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <SysTick_Handler+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <SysTick_Handler+0x64>)
 8002bcc:	6013      	str	r3, [r2, #0]

	if(SysTickCnt%5000==0){
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <SysTick_Handler+0x64>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <SysTick_Handler+0x68>)
 8002bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bd8:	0b1b      	lsrs	r3, r3, #12
 8002bda:	f241 3188 	movw	r1, #5000	; 0x1388
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11a      	bne.n	8002c1e <SysTick_Handler+0x5e>
		if(hbState)
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <SysTick_Handler+0x6c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <SysTick_Handler+0x3e>
			GPIO_SetBits(PORT_LED1, PIN_LED1);
 8002bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf6:	480e      	ldr	r0, [pc, #56]	; (8002c30 <SysTick_Handler+0x70>)
 8002bf8:	f7fe fa92 	bl	8001120 <GPIO_SetBits>
 8002bfc:	e004      	b.n	8002c08 <SysTick_Handler+0x48>
		else
			GPIO_ResetBits(PORT_LED1, PIN_LED1);
 8002bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c02:	480b      	ldr	r0, [pc, #44]	; (8002c30 <SysTick_Handler+0x70>)
 8002c04:	f7fe fa9a 	bl	800113c <GPIO_ResetBits>

		hbState=!hbState;
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <SysTick_Handler+0x6c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <SysTick_Handler+0x6c>)
 8002c1c:	701a      	strb	r2, [r3, #0]
	}

}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000090 	.word	0x20000090
 8002c28:	d1b71759 	.word	0xd1b71759
 8002c2c:	20000094 	.word	0x20000094
 8002c30:	40010c00 	.word	0x40010c00

08002c34 <main>:


/*==========================================================================*/
/*  							Main program								*/
/*==========================================================================*/
int main(void){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

	SystemInit();
 8002c38:	f000 f854 	bl	8002ce4 <SystemInit>


	InitPeriph();
 8002c3c:	f7ff fc9e 	bl	800257c <InitPeriph>
	InitNav();
 8002c40:	f7ff fba4 	bl	800238c <InitNav>
	*/

	/* TODO - Add your application code here */

	/* Infinite loop */
	while (1){
 8002c44:	e7fe      	b.n	8002c44 <main+0x10>
	...

08002c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c4e:	e003      	b.n	8002c58 <LoopCopyDataInit>

08002c50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002c52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c56:	3104      	adds	r1, #4

08002c58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c58:	480b      	ldr	r0, [pc, #44]	; (8002c88 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002c5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c60:	d3f6      	bcc.n	8002c50 <CopyDataInit>
	ldr	r2, =_sbss
 8002c62:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002c64:	e002      	b.n	8002c6c <LoopFillZerobss>

08002c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c68:	f842 3b04 	str.w	r3, [r2], #4

08002c6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002c6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c70:	d3f9      	bcc.n	8002c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c72:	f000 f837 	bl	8002ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c76:	f000 f8ef 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c7a:	f7ff ffdb 	bl	8002c34 <main>
	bx	lr
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c80:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002c84:	08002ec0 	.word	0x08002ec0
	ldr	r0, =_sdata
 8002c88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c8c:	20000050 	.word	0x20000050
	ldr	r2, =_sbss
 8002c90:	20000050 	.word	0x20000050
	ldr	r3, = _ebss
 8002c94:	200000cc 	.word	0x200000cc

08002c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC1_2_IRQHandler>

08002c9a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <HardFault_Handler+0x4>

08002cac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <MemManage_Handler+0x4>

08002cb2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <BusFault_Handler+0x4>

08002cb8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <UsageFault_Handler+0x4>

08002cbe <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
	...

08002ce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ce8:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <SystemInit+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <SystemInit+0x5c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002cf4:	4912      	ldr	r1, [pc, #72]	; (8002d40 <SystemInit+0x5c>)
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <SystemInit+0x5c>)
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <SystemInit+0x60>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d00:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <SystemInit+0x5c>)
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <SystemInit+0x5c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d10:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <SystemInit+0x5c>)
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <SystemInit+0x5c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002d1c:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <SystemInit+0x5c>)
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <SystemInit+0x5c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002d26:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <SystemInit+0x5c>)
 8002d2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002d2e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002d30:	f000 f80c 	bl	8002d4c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <SystemInit+0x64>)
 8002d36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d3a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	f8ff0000 	.word	0xf8ff0000
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002d50:	f000 f802 	bl	8002d58 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	2300      	movs	r3, #0
 8002d64:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002d66:	4a3a      	ldr	r2, [pc, #232]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002d72:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <SetSysClockTo72+0x38>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002d8e:	d1f0      	bne.n	8002d72 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002d90:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	e001      	b.n	8002da6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002da2:	2300      	movs	r3, #0
 8002da4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d14b      	bne.n	8002e44 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002dac:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <SetSysClockTo72+0xfc>)
 8002dae:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <SetSysClockTo72+0xfc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f043 0310 	orr.w	r3, r3, #16
 8002db6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <SetSysClockTo72+0xfc>)
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <SetSysClockTo72+0xfc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002dc4:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <SetSysClockTo72+0xfc>)
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <SetSysClockTo72+0xfc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002dd0:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002dd2:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002dd8:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002de0:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dea:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002dec:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002dee:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002df6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002df8:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002e02:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002e04:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002e10:	bf00      	nop
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f9      	beq.n	8002e12 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 0303 	bic.w	r3, r3, #3
 8002e28:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002e36:	bf00      	nop
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <SetSysClockTo72+0xf8>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d1f9      	bne.n	8002e38 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40022000 	.word	0x40022000

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	2500      	movs	r5, #0
 8002e5c:	4e0c      	ldr	r6, [pc, #48]	; (8002e90 <__libc_init_array+0x38>)
 8002e5e:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <__libc_init_array+0x3c>)
 8002e60:	1ba4      	subs	r4, r4, r6
 8002e62:	10a4      	asrs	r4, r4, #2
 8002e64:	42a5      	cmp	r5, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	f000 f81a 	bl	8002ea0 <_init>
 8002e6c:	2500      	movs	r5, #0
 8002e6e:	4e0a      	ldr	r6, [pc, #40]	; (8002e98 <__libc_init_array+0x40>)
 8002e70:	4c0a      	ldr	r4, [pc, #40]	; (8002e9c <__libc_init_array+0x44>)
 8002e72:	1ba4      	subs	r4, r4, r6
 8002e74:	10a4      	asrs	r4, r4, #2
 8002e76:	42a5      	cmp	r5, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e80:	4798      	blx	r3
 8002e82:	3501      	adds	r5, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e8a:	4798      	blx	r3
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	08002eb8 	.word	0x08002eb8
 8002e94:	08002eb8 	.word	0x08002eb8
 8002e98:	08002eb8 	.word	0x08002eb8
 8002e9c:	08002ebc 	.word	0x08002ebc

08002ea0 <_init>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	bf00      	nop
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr

08002eac <_fini>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	bf00      	nop
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr
